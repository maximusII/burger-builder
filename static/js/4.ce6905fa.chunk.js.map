{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","styles","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","onChange","changed","className","join","elementConfig","value","options","map","option","displayValue","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","e","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","formElementsArray","key","id","config","form","formElement","event","loading","errorMessage","error","message","authRedirect","isAuth","to","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","setAuthRedirectPath"],"mappings":"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","file":"static/js/4.ce6905fa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [styles.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(styles.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        ></input>\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        ></textarea>\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map((option) => {\r\n            return (\r\n              <option key={option.value} value={option.value}>\r\n                {option.displayValue}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        ></input>\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={styles.Input}>\r\n      <label className={styles.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3A0k8\",\"Label\":\"Input_Label__2oqVJ\",\"InputElement\":\"Input_InputElement__38ddi\",\"Invalid\":\"Input_Invalid__GQckk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2wtGj\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport styles from \"./Auth.module.css\";\r\nimport {\r\n  auth,\r\n  // authStart,\r\n  // authSuccess,\r\n  // authFail,\r\n  setAuthRedirectPath,\r\n} from \"../../store/actions/auth\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your Email\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignup: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  checkValidity(value, rules) {\r\n    let isValid = true;\r\n\r\n    if (!rules) {\r\n      return true;\r\n    }\r\n\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n      isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  inputChangedHandler = (e, controlName) => {\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: e.target.value,\r\n        valid: this.checkValidity(\r\n          e.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      },\r\n    };\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        isSignup: !prevState.isSignup,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuth) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={styles.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n        </form>\r\n        <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\r\n          SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(setAuthRedirectPath(\"/\")),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}