{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["Input","props","inputElement","inputClasses","styles","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","onChange","changed","className","join","elementConfig","value","options","map","option","displayValue","Label","label","module","exports","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","e","preventDefault","formData","formElementIdentifier","order","ings","price","ttlPrice","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","setState","rules","isValid","trim","length","formElementsArray","key","this","id","config","form","onSubmit","formElement","event","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","purchaseBurger","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.3f59f518.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [styles.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(styles.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        ></input>\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        ></textarea>\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map((option) => {\r\n            return (\r\n              <option key={option.value} value={option.value}>\r\n                {option.displayValue}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        ></input>\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={styles.Input}>\r\n      <label className={styles.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3A0k8\",\"Label\":\"Input_Label__2oqVJ\",\"InputElement\":\"Input_InputElement__38ddi\",\"Invalid\":\"Input_Invalid__GQckk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__217pm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__q8KTj\"};","import React from \"react\";\r\n\r\nimport styles from \"./CheckoutSummary.module.css\";\r\n\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nconst CheckoutSummary = (props) => {\r\n  return (\r\n    <div className={styles.CheckoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutSummary;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport styles from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport { purchaseBurger } from \"../../../store/actions/order\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Zip Code\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your Email\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Fastest\" },\r\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n\r\n  orderHandler = (e) => {\r\n    e.preventDefault();\r\n    const formData = {};\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[\r\n        formElementIdentifier\r\n      ].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.ttlPrice,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  checkValidity(value, rules) {\r\n    let isValid = true;\r\n\r\n    if (!rules) {\r\n      return true;\r\n    }\r\n\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n      isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  inputChangedHandler = (e, inputIdentifier) => {\r\n    const updatedOrderForm = { ...this.state.orderForm };\r\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier] };\r\n    updatedFormElement.value = e.target.value;\r\n    updatedFormElement.valid = this.checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.touched = true;\r\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map((formElement) => {\r\n          return (\r\n            <Input\r\n              key={formElement.id}\r\n              elementType={formElement.config.elementType}\r\n              elementConfig={formElement.config.elementConfig}\r\n              value={formElement.config.value}\r\n              invalid={!formElement.config.valid}\r\n              shouldValidate={formElement.config.validation}\r\n              touched={formElement.config.touched}\r\n              changed={(event) =>\r\n                this.inputChangedHandler(event, formElement.id)\r\n              }\r\n            />\r\n          );\r\n        })}\r\n\r\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\r\n          ORDER\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={styles.ContactData}>\r\n        <h4>Enter your contact data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    ttlPrice: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\n\r\nclass Checkout extends Component {\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (this.props.ings) {\r\n      const purchasedRedirect = this.props.purchased ? (\r\n        <Redirect to=\"/\" />\r\n      ) : null;\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n          />\r\n          <Route\r\n            path={this.props.match.path + \"/contact-data\"}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     onInitPurchase: () => {\r\n//       dispatch(purchaseInit());\r\n//     },\r\n//   };\r\n// };\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}